--- TaskContext methods.
-- The following methods are available for TaskContext types
--

module 'rtt.TaskContext'

--- Get name of TaskContext.
-- @return string with name
function getName()

--- Start TaskContext.
-- @return boolean to indicate wether starting succeeded
function start()

--- Stop TaskContext.
-- @return boolean to indicate wether stopping succeeded
function stop()

--- Configure TaskContext.
-- @return boolean to indicate wether configuring succeeded
function configure()

--- Activate TaskContext.
-- @return boolean to indicate wether activating succeeded
function activate()

--- Cleanup TaskContext.
-- @return boolean to indicate wether cleanup succeeded
function cleanup()

--- Raise a run-time error.
function error()

--- Recover from a run-time error.
-- @return boolean to indicate wether recovering succeeded
function recover()

--- Get current TaskContext lifecycle state.
-- @return current state (string)
function getState()

--- Get Peers.
-- return a table containing the names of all peers
-- @return table with peer names
function getPeers()

--- Add a TaskContext as a peer.
-- @param TaskContext
function addPeer(TaskContext)

--- Remove a peer.
-- @param string name of peer to be removed
function removePeer(string)

--- Get a peer of a TaskContext.
-- @param string name of peer
-- @return the requested peer TaskContext
function getPeer(string)

--- Get port names.
-- get a table containing names of all ports of TaskContext
-- @return table of port names
function getPortNames()

--- Add a Port to the TaskContext interface.
-- @param port
-- @param name name of port (optional)
-- @param desc description of port (optional)
function addPort(port, name, desc)

--- Add a port as an event driven to the TaskContext interface.
-- When data is received on this port the TaskContext will be triggered.
-- @param port
-- @param name name of port (optional)
-- @param desc description of port (optional)
function addEventPort(port, name, desc)

--- Get a port of a TaskContext interface.
-- @param string name of port
-- @return Port
function getPort(string)

--- Remove a port from a TaskContext interface.
-- @param string name of port
function removePort(string)

--- Add a property to a TaskContext.
-- @param Property to be added
-- @param name name of property (optional)
-- @param desc description of Property (optional)
function addProperty(Property, name, desc)

--- Get a property of a TaskContext.
-- @param name name of property
function getProperty(name)

--- Return all properties in a table.
-- @return a table containing all properties (not string names!) of the TaskContext
function getProperties()

--- Return the names of all properties in a table.
-- @return a table containing all properties string names of the TaskContext
function getPropertyNames()

--- Remove a Property from a TaskContext Interface.
-- @param string name of property to be removed
function removeProperty(string)

--- Return a table of names of the available operations.
-- @return table of operation names
function getOps()

--- Return information about an Operation.
-- @param string name of operation
-- @return name of operation
-- @return arity arity of operation
-- @return description of operation
-- @return table of argument descriptions
function getOpInfo(string)

--- Get a service provided by a TaskContext.
-- if no name argument is given, the default service is returned. See
-- the RTT docs for more infomation on this. 
-- @param name of service
-- @return Service requested
function provides(name)

--- Get names of services provided by a TaskContext.
-- @return table of string names
function getProviderNames()

--- Get required services.
-- Return a ServiceRequester which represents the services required by
-- this component to work. If no name is given the default
-- ServiceRequester is returned. See the RTT docs for more information
-- on this.
-- @param name name of ServiceRequester.
-- @return ServiceRequester
function requires(name)

--- Connect required and provided services.
-- Connect the RequiredServices of this component to the provided
-- services of the given peer.
-- @param peer taskcontext which has what we want.
-- @return boolean if success, false otherwise.
function connectServices(peer)

--- Call an Operation of a TaskContext.
-- Note: this pumbing method is removed as from toolchain-2.5. Instead
-- call the operation directly using
-- <code>TaskContext:operation()</code> (conveniant, but non-rt) or
-- use the Service:getOperation interface to get an operation which
-- can then be called using <code>op(arg1, arg2, ...)</code>
-- @param name name of operation
-- @param ... zero or more arguments
-- @return return value plus zero or more out arguments.
function call(name, ...)

--- get an Operation.
-- get an operation object which can be called directly. This is the
-- fastest way to get a call out.
-- @param name name of operation
-- @return Operation
function getOperation(name)

--- Check if TaskContext has an Operation
-- @param name name of operation to check
-- @return true if operation with name exists.
function hasOperation(name)

--- Delete a TaskContext
-- Delete a TaskContext and free the memory. Normally this function
-- should not be used.
-- @param: TaskContext TaskContext to be deleted
function delete(TaskContext)